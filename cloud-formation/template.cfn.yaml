# Capitalise attributes
# We've done the minimally required fields for now (see AWS documentation)
# Any comments about your template can be specified in the description.
Description: "First test sample template"
# In Resources you declare the AWS resource that you want to create and specify in the stack, such as an Amazon S3 bucket or AWS Lambda.  
Resources: 
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              # Here we've specified the Lambda service, we could be more specific and choose a particular lambda
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  DynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoPolicy
      PolicyDocument: 
        Version: 2012-10-17 #optional
        Statement: # - is how we denote an array
          - Effect: Allow
            Action: dynamodb:UpdateItem # * would allow to do anything, not good practice, though UpdateItem probably too restrictive would probs want to atttach predefined AWS DDB Read/Write access policy
            Resource: !GetAtt Table.Arn # or !Sub arn:aws:dynamodb:eu-west-1:${AWS::AccountId}:table/${Table} - sub acts as a template literal, substitute names in
      Roles: 
        - !Ref Role # Here we are creating the policy as a stand alone resource in the stack, cleaner than writing in line
  Function:
    Type: AWS::Lambda::Function
    Properties: 
      Code: # This had been in-line, I've now moved into a separate file store in an s3 bucket
        S3Bucket: cbf-faith-bucket
        S3Key: 860520ffda733c57a0257448c0fdfe92
        # Comments don't work inside a |, in YAML | signifies that the code should be read as is
        # A Zip file is one way of importing a library, could also put in an S3 bucket and refer to it
      Runtime: nodejs12.x
      Handler: step-lambda.handler
      # The IAM role that the Lambda has permission to assume when you invoke the function, this is required!
      # The Fn::GetAtt intrinsic function returns a value for a specified attribute of this type (in this case the ARN of the role)
      Role: !GetAtt Role.Arn
      Environment: 
        Variables:
          TABLE_NAME: !Ref Table # Referencing the table below
  Table: # Table resource
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput: #Needs to be used as part of free tier
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
      - AttributeName: Id # Primary key is called id and is a string
        AttributeType: S
      KeySchema:
      - AttributeName: Id # We are hashing the data to give it a more even distribution
        KeyType: HASH